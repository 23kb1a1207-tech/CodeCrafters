
import React from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Calendar } from "@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "@/components/ui/popover";
import { Label } from "@/components/ui/label";
import { format } from "date-fns";
import { Calendar as CalendarIcon, Plus, DollarSign } from "lucide-react";
import { motion } from "framer-motion";

export default function TaskForm({ task, onSubmit, onCancel }) {
  const [currentTask, setCurrentTask] = React.useState(task || {
    title: "",
    description: "",
    status: "todo",
    priority: "medium",
    category: "personal",
    due_date: "",
    estimated_cost: 0,
    actual_cost: 0
  });

  const handleSubmit = (e) => {
    e.preventDefault();
    onSubmit(currentTask);
  };

  return (
    <motion.div
      initial={{ opacity: 0, y: -20 }}
      animate={{ opacity: 1, y: 0 }}
      exit={{ opacity: 0, y: -20 }}
      className="bg-white/90 backdrop-blur-sm rounded-xl shadow-lg p-6 mb-8 border border-white/20"
    >
      <h3 className="text-xl font-semibold mb-6">
        {task ? 'Edit Task' : 'Create New Task'}
      </h3>
      <form onSubmit={handleSubmit} className="space-y-6">
        <div className="grid md:grid-cols-2 gap-6">
          <div className="space-y-2">
            <Label htmlFor="title">Task Title</Label>
            <Input
              id="title"
              placeholder="What needs to be done?"
              value={currentTask.title}
              onChange={(e) => setCurrentTask({...currentTask, title: e.target.value})}
              className="text-lg"
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="category">Category</Label>
            <Select
              value={currentTask.category}
              onValueChange={(value) => setCurrentTask({...currentTask, category: value})}
            >
              <SelectTrigger>
                <SelectValue placeholder="Select category" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="work">Work</SelectItem>
                <SelectItem value="personal">Personal</SelectItem>
                <SelectItem value="shopping">Shopping</SelectItem>
                <SelectItem value="health">Health</SelectItem>
                <SelectItem value="learning">Learning</SelectItem>
                <SelectItem value="finance">Finance</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>

        <div className="space-y-2">
          <Label htmlFor="description">Description</Label>
          <Textarea
            id="description"
            placeholder="Add details about this task..."
            value={currentTask.description}
            onChange={(e) => setCurrentTask({...currentTask, description: e.target.value})}
            className="h-24"
          />
        </div>

        <div className="grid md:grid-cols-3 gap-4">
          <div className="space-y-2">
            <Label>Priority</Label>
            <Select
              value={currentTask.priority}
              onValueChange={(value) => setCurrentTask({...currentTask, priority: value})}
            >
              <SelectTrigger>
                <SelectValue placeholder="Priority" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="low">Low Priority</SelectItem>
                <SelectItem value="medium">Medium Priority</SelectItem>
                <SelectItem value="high">High Priority</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <Label>Due Date</Label>
            <Popover>
              <PopoverTrigger asChild>
                <Button variant="outline" className="w-full justify-start">
                  <CalendarIcon className="mr-2 h-4 w-4" />
                  {currentTask.due_date ? format(new Date(currentTask.due_date), 'PPP') : 'Select date'}
                </Button>
              </PopoverTrigger>
              <PopoverContent className="w-auto p-0">
                <Calendar
                  mode="single"
                  selected={currentTask.due_date ? new Date(currentTask.due_date) : undefined}
                  onSelect={(date) => setCurrentTask({...currentTask, due_date: date})}
                />
              </PopoverContent>
            </Popover>
          </div>

          <div className="space-y-2">
            <Label htmlFor="status">Status</Label>
            <Select
              value={currentTask.status}
              onValueChange={(value) => setCurrentTask({...currentTask, status: value})}
            >
              <SelectTrigger>
                <SelectValue placeholder="Status" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="todo">Todo</SelectItem>
                <SelectItem value="in_progress">In Progress</SelectItem>
                <SelectItem value="done">Done</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>

        <div className="grid md:grid-cols-2 gap-4">
          <div className="space-y-2">
            <Label htmlFor="estimated_cost">Estimated Cost (₹)</Label>
            <Input
              id="estimated_cost"
              type="number"
              min="0"
              step="0.01"
              placeholder="0.00"
              value={currentTask.estimated_cost || ""}
              onChange={(e) => setCurrentTask({...currentTask, estimated_cost: parseFloat(e.target.value) || 0})}
            />
          </div>
          <div className="space-y-2">
            <Label htmlFor="actual_cost">Actual Cost (₹)</Label>
            <Input
              id="actual_cost"
              type="number"
              min="0"
              step="0.01"
              placeholder="0.00"
              value={currentTask.actual_cost || ""}
              onChange={(e) => setCurrentTask({...currentTask, actual_cost: parseFloat(e.target.value) || 0})}
            />
          </div>
        </div>

        <div className="flex justify-end gap-3 pt-4">
          <Button type="button" variant="outline" onClick={onCancel}>
            Cancel
          </Button>
          <Button type="submit" className="bg-indigo-600 hover:bg-indigo-700">
            {task ? 'Update Task' : 'Create Task'}
          </Button>
        </div>
      </form>
    </motion.div>
  );
}
