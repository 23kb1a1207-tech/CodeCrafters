
import React from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Link } from "react-router-dom";
import { createPageUrl } from "@/utils";
import { TrendingUp, TrendingDown, ExternalLink, AlertTriangle } from "lucide-react";
import { Skeleton } from "@/components/ui/skeleton";
import { Progress } from "@/components/ui/progress";

export default function BudgetOverview({ budgetEntries, isLoading }) {
  const currentMonth = new Date().getMonth();
  const currentYear = new Date().getFullYear();
  
  const thisMonthEntries = budgetEntries.filter(entry => {
    const entryDate = new Date(entry.date);
    return entryDate.getMonth() === currentMonth && entryDate.getFullYear() === currentYear;
  });

  const monthlyBudget = thisMonthEntries.filter(e => e.type === "budget_limit").reduce((sum, e) => sum + e.amount, 0);
  const monthlySpent = thisMonthEntries.filter(e => e.type === "expense").reduce((sum, e) => sum + e.amount, 0);
  const monthlyIncome = thisMonthEntries.filter(e => e.type === "income").reduce((sum, e) => sum + e.amount, 0);

  const budgetUsagePercentage = monthlyBudget > 0 ? (monthlySpent / monthlyBudget) * 100 : 0;
  const isOverBudget = budgetUsagePercentage > 100;

  const categorySpending = {};
  thisMonthEntries.filter(e => e.type === "expense").forEach(entry => {
    categorySpending[entry.category] = (categorySpending[entry.category] || 0) + entry.amount;
  });

  const topCategories = Object.entries(categorySpending)
    .sort(([,a], [,b]) => b - a)
    .slice(0, 3);

  return (
    <Card className="bg-white/80 backdrop-blur-sm border border-white/20 shadow-lg">
      <CardHeader>
        <div className="flex justify-between items-center">
          <CardTitle className="text-xl font-bold">Budget Overview</CardTitle>
          <Link to={createPageUrl("Budget")}>
            <Button variant="outline" size="sm">
              <ExternalLink className="w-4 h-4 mr-2" />
              Manage Budget
            </Button>
          </Link>
        </div>
      </CardHeader>
      <CardContent>
        {isLoading ? (
          <div className="space-y-4">
            <Skeleton className="h-4 w-full" />
            <Skeleton className="h-20 w-full" />
            <Skeleton className="h-16 w-full" />
          </div>
        ) : (
          <div className="space-y-6">
            {/* Budget Progress */}
            <div className="space-y-3">
              <div className="flex justify-between items-center">
                <span className="text-sm font-medium text-gray-600">Monthly Budget Usage</span>
                {isOverBudget && (
                  <Badge variant="destructive" className="flex items-center gap-1">
                    <AlertTriangle className="w-3 h-3" />
                    Over Budget
                  </Badge>
                )}
              </div>
              <Progress 
                value={Math.min(budgetUsagePercentage, 100)} 
                className={`h-3 ${isOverBudget ? '[&>div]:bg-red-500' : '[&>div]:bg-green-500'}`}
              />
              <div className="flex justify-between text-sm text-gray-600">
                <span>₹{monthlySpent.toFixed(2)} spent</span>
                <span>₹{monthlyBudget.toFixed(2)} budget</span>
              </div>
            </div>

            {/* Quick Stats */}
            <div className="grid grid-cols-2 gap-4">
              <div className="text-center p-3 bg-green-50 rounded-lg">
                <TrendingUp className="w-6 h-6 text-green-600 mx-auto mb-1" />
                <p className="text-lg font-bold text-green-600">₹{monthlyIncome.toFixed(2)}</p>
                <p className="text-xs text-gray-600">This Month Income</p>
              </div>
              <div className="text-center p-3 bg-red-50 rounded-lg">
                <TrendingDown className="w-6 h-6 text-red-600 mx-auto mb-1" />
                <p className="text-lg font-bold text-red-600">₹{monthlySpent.toFixed(2)}</p>
                <p className="text-xs text-gray-600">This Month Spent</p>
              </div>
            </div>

            {/* Top Spending Categories */}
            {topCategories.length > 0 && (
              <div className="space-y-3">
                <h4 className="font-medium text-gray-700">Top Spending Categories</h4>
                {topCategories.map(([category, amount]) => (
                  <div key={category} className="flex justify-between items-center">
                    <span className="text-sm font-medium capitalize">{category.replace('_', ' ')}</span>
                    <Badge variant="outline">₹{amount.toFixed(2)}</Badge>
                  </div>
                ))}
              </div>
            )}
          </div>
        )}
      </CardContent>
    </Card>
  );
}
